module i2s_tx #(parameter DATA_WIDTH = 16
				) (clk, left_chan, right_chan, sdata, lrclk, mck, sck);

input wire clk; //general clock of project (top level)

input wire [DATA_WIDTH-1:0] left_chan;
input wire [DATA_WIDTH-1:0] right_chan;
output reg sdata; initial sdata <= 1'b0;

output reg mck; initial mck <= 1'b0; // i2s master clock 50 / 2 = 25 mhz
output reg sck; initial sck <= 1'b0; // serial clock 25 mhz / 128 = 195312,5 Hz
output reg lrclk; initial lrclk <= 1'b0;

reg [6:0] cnt; initial cnt <= 0;

parameter WIDTH = $clog2(DATA_WIDTH+1);
reg [WIDTH-1:0]      bit_cnt; initial bit_cnt <= {WIDTH{1'b0}};

wire [WIDTH-1:0] next_bit_cnt = (bit_cnt == (DATA_WIDTH-1)) ? {WIDTH{1'b0}} : bit_cnt + 1'b1;

reg [DATA_WIDTH-1:0] ch_data; initial ch_data <= {DATA_WIDTH{1'b0}};

//assign sdata = ch_data[DATA_WIDTH-1];

always @(posedge clk) begin
	mck <= ~mck;
	cnt <= cnt + 1'b1;
	sck     <= (cnt==0) ? ~sck : sck;
	bit_cnt <= (sck==1 && cnt==0) ? next_bit_cnt : bit_cnt;
	lrclk   <= (sck==1 && cnt==0 && bit_cnt==0) ? ~lrclk : lrclk;
	
	if(sck==1 && cnt==0) begin
		sdata <= ch_data[DATA_WIDTH-1];
		if(bit_cnt==0) begin
			ch_data <= (lrclk) ? left_chan : right_chan;
		end else begin
			ch_data <= ch_data<<1;
		end
	end
end

endmodule
